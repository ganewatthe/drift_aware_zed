function driftDetect_subsystem()
% This is a generated function based on subsystem:
%     driftDetect
% Though there are limitations about the generated script, 
% the main purpose of this utility is to make learning
% Sysgen Script easier.
% 
% To test it, run the following commands from MATLAB console:
% cfg.source = str2func('driftDetect_subsystem');
% cfg.toplevel = 1;
% args = {};
% xBlock(cfg, args);
% 
% You can edit driftDetect_subsystem.m to debug your script.
% 
% You can also replace the MaskInitialization code with the 
% following commands so the subsystem will be generated 
% according to the values of mask parameters.
% cfg.source = str2func('driftDetect_subsystem');
% cfg.toplevel = gcb;
% args = {};
% xBlock(cfg, args);
% 
% To configure the xBlock call in debug mode, in which mode,
% autolayout will be performed every time a block is added,
% run the following commands:
% cfg.source = str2func('driftDetect_subsystem');
% cfg.toplevel = gcb;
% cfg.debug = 1;
% args = {};
% xBlock(cfg, args);
% 
% To make the xBlock smart so it won't re-generate the
% subsystem if neither the arguments nor the scripts are
% changes, use as the following:
% cfg.source = str2func('driftDetect_subsystem');
% cfg.toplevel = gcb;
% cfg.depend = {'driftDetect_subsystem'};
% args = {};
% xBlock(cfg, args);
% 
% See also xBlock, xInport, xOutport, xSignal, xlsub2script.


%% inports

%% outports

%% diagram

% block: driftDetect/ System Generator
xlsub1_block1 = xBlock(struct('source', ' System Generator', 'name', ' System Generator'), ...
                       struct('xilinxfamily', 'zynq', ...
                              'part', 'xc7z020', ...
                              'speed', '-1', ...
                              'package', 'clg484', ...
                              'sysclk_period', 8), ...
                       {}, ...
                       {});

% block: driftDetect/Convert1
xlsub1_Detector_out3 = xSignal('xlsub1_Detector_out3');
xlsub1_Convert1_out1 = xSignal('xlsub1_Convert1_out1');
xlsub1_Convert1 = xBlock(struct('source', 'Convert', 'name', 'Convert1'), ...
                         struct('gui_display_data_type', 'Boolean', ...
                                'arith_type', 'Boolean', ...
                                'n_bits', 1, ...
                                'bin_pt', 0, ...
                                'latency', 0), ...
                         {xlsub1_Detector_out3}, ...
                         {xlsub1_Convert1_out1});

% block: driftDetect/Delay1
xlsub1_Delay8_out1 = xSignal('xlsub1_Delay8_out1');
xlsub1_Delay1_out1 = xSignal('xlsub1_Delay1_out1');
xlsub1_Delay1 = xBlock(struct('source', 'Delay', 'name', 'Delay1'), ...
                       [], ...
                       {xlsub1_Delay8_out1}, ...
                       {xlsub1_Delay1_out1});

% block: driftDetect/Delay10
xlsub1_fifo_rd_underflow_i_out1 = xSignal('xlsub1_fifo_rd_underflow_i_out1');
xlsub1_Delay10_out1 = xSignal('xlsub1_Delay10_out1');
xlsub1_Delay10 = xBlock(struct('source', 'Delay', 'name', 'Delay10'), ...
                        [], ...
                        {xlsub1_fifo_rd_underflow_i_out1}, ...
                        {xlsub1_Delay10_out1});

% block: driftDetect/Delay6
xlsub1_MCode_out2 = xSignal('xlsub1_MCode_out2');
xlsub1_Delay6_out1 = xSignal('xlsub1_Delay6_out1');
xlsub1_Delay6 = xBlock(struct('source', 'Delay', 'name', 'Delay6'), ...
                       [], ...
                       {xlsub1_MCode_out2}, ...
                       {xlsub1_Delay6_out1});

% block: driftDetect/Delay8
xlsub1_fifo_data_i_out1 = xSignal('xlsub1_fifo_data_i_out1');
xlsub1_Delay8 = xBlock(struct('source', 'Delay', 'name', 'Delay8'), ...
                       [], ...
                       {xlsub1_fifo_data_i_out1}, ...
                       {xlsub1_Delay8_out1});

% block: driftDetect/Delay9
xlsub1_fifo_data_valid_i_out1 = xSignal('xlsub1_fifo_data_valid_i_out1');
xlsub1_Delay9_out1 = xSignal('xlsub1_Delay9_out1');
xlsub1_Delay9 = xBlock(struct('source', 'Delay', 'name', 'Delay9'), ...
                       [], ...
                       {xlsub1_fifo_data_valid_i_out1}, ...
                       {xlsub1_Delay9_out1});





% block: driftDetect/MCode
xlsub1_MCode_out1 = xSignal('xlsub1_MCode_out1');
xlsub1_MCode_out3 = xSignal('xlsub1_MCode_out3');
xlsub1_MCode = xBlock(struct('source', 'MCode', 'name', 'MCode'), ...
                      struct('mfname', 'state_machine', ...
                             'inputsTable', '{''boundInpExpr''=>['''',''''],''inputs''=>[''fifo_data_valid_i'',''fifo_rd_underflow_i'']}', ...
                             'outputsTable', '{''outputs''=>[''sel_o'',''valid_o'',''fifo_rd_o''],''suppressOut''=>[''off'',''off'',''off'']}'), ...
                      {xlsub1_Delay9_out1, xlsub1_Delay10_out1}, ...
                      {xlsub1_MCode_out1, xlsub1_MCode_out2, xlsub1_MCode_out3});

% block: driftDetect/Mux
xlsub1_Register_out1 = xSignal('xlsub1_Register_out1');
xlsub1_Detector_out2 = xSignal('xlsub1_Detector_out2');
xlsub1_Detector_out4 = xSignal('xlsub1_Detector_out4');
xlsub1_Mux_out1 = xSignal('xlsub1_Mux_out1');
xlsub1_Mux = xBlock(struct('source', 'Mux', 'name', 'Mux'), ...
                    struct('latency', 0, ...
                           'precision', 'User Defined', ...
                           'bin_pt', 0), ...
                    {xlsub1_Register_out1, xlsub1_Detector_out2, xlsub1_Detector_out4}, ...
                    {xlsub1_Mux_out1});

% block: driftDetect/Mux1
xlsub1_Detector_out5 = xSignal('xlsub1_Detector_out5');
xlsub1_Mux1_out1 = xSignal('xlsub1_Mux1_out1');
xlsub1_Mux1 = xBlock(struct('source', 'Mux', 'name', 'Mux1'), ...
                     struct('latency', 0), ...
                     {xlsub1_Register_out1, xlsub1_Detector_out2, xlsub1_Detector_out5}, ...
                     {xlsub1_Mux1_out1});

% block: driftDetect/Mux4
xlsub1_Detector_out1 = xSignal('xlsub1_Detector_out1');
xlsub1_Mux4_out1 = xSignal('xlsub1_Mux4_out1');
xlsub1_Mux4 = xBlock(struct('source', 'Mux', 'name', 'Mux4'), ...
                     struct('latency', 0), ...
                     {xlsub1_Register_out1, xlsub1_Detector_out1, xlsub1_Detector_out3}, ...
                     {xlsub1_Mux4_out1});




% block: driftDetect/Register
xlsub1_edge_detector_out1 = xSignal('xlsub1_edge_detector_out1');
xlsub1_Register = xBlock(struct('source', 'Register', 'name', 'Register'), ...
                         struct('rst', 'on', ...
                                'en', 'on'), ...
                         {xlsub1_edge_detector_out1, xlsub1_Convert1_out1, xlsub1_edge_detector_out1}, ...
                         {xlsub1_Register_out1});




% block: driftDetect/data_0_o
xlsub1_data_0_o_out1 = xSignal('xlsub1_data_0_o_out1');
xlsub1_data_0_o = xBlock(struct('source', 'Gateway Out', 'name', 'data_0_o'), ...
                         [], ...
                         {xlsub1_Mux_out1}, ...
                         {xlsub1_data_0_o_out1});

% block: driftDetect/data_1_o
xlsub1_data_1_o_out1 = xSignal('xlsub1_data_1_o_out1');
xlsub1_data_1_o = xBlock(struct('source', 'Gateway Out', 'name', 'data_1_o'), ...
                         [], ...
                         {xlsub1_Mux1_out1}, ...
                         {xlsub1_data_1_o_out1});

% block: driftDetect/data_valid_o
xlsub1_data_valid_o_out1 = xSignal('xlsub1_data_valid_o_out1');
xlsub1_data_valid_o = xBlock(struct('source', 'Gateway Out', 'name', 'data_valid_o'), ...
                             [], ...
                             {xlsub1_Mux4_out1}, ...
                             {xlsub1_data_valid_o_out1});

% block: driftDetect/fifo_data_i
xlsub1_fifo_data_i = xBlock(struct('source', 'Gateway In', 'name', 'fifo_data_i'), ...
                            struct('arith_type', 'Unsigned', ...
                                   'n_bits', 32, ...
                                   'bin_pt', 31), ...
                            {[]}, ...
                            {xlsub1_fifo_data_i_out1});

% block: driftDetect/fifo_data_valid_i
xlsub1_fifo_data_valid_i = xBlock(struct('source', 'Gateway In', 'name', 'fifo_data_valid_i'), ...
                                  struct('gui_display_data_type', 'Boolean', ...
                                         'arith_type', 'Boolean', ...
                                         'n_bits', 1, ...
                                         'bin_pt', 0), ...
                                  {[]}, ...
                                  {xlsub1_fifo_data_valid_i_out1});

% block: driftDetect/fifo_rd_o
xlsub1_fifo_rd_o_out1 = xSignal('xlsub1_fifo_rd_o_out1');
xlsub1_fifo_rd_o = xBlock(struct('source', 'Gateway Out', 'name', 'fifo_rd_o'), ...
                          [], ...
                          {xlsub1_MCode_out3}, ...
                          {xlsub1_fifo_rd_o_out1});

% block: driftDetect/fifo_rd_underflow_i
xlsub1_fifo_rd_underflow_i = xBlock(struct('source', 'Gateway In', 'name', 'fifo_rd_underflow_i'), ...
                                    struct('gui_display_data_type', 'Boolean', ...
                                           'arith_type', 'Boolean', ...
                                           'n_bits', 1, ...
                                           'bin_pt', 0), ...
                                    {[]}, ...
                                    {xlsub1_fifo_rd_underflow_i_out1});

% block: driftDetect/idata_i
xlsub1_idata_i_out1 = xSignal('xlsub1_idata_i_out1');
xlsub1_idata_i = xBlock(struct('source', 'Gateway In', 'name', 'idata_i'), ...
                        struct('bin_pt', 0, ...
                               'intf_description', 'Idata'), ...
                        {[]}, ...
                        {xlsub1_idata_i_out1});

% block: driftDetect/ivalid_i
xlsub1_ivalid_i_out1 = xSignal('xlsub1_ivalid_i_out1');
xlsub1_ivalid_i = xBlock(struct('source', 'Gateway In', 'name', 'ivalid_i'), ...
                         struct('gui_display_data_type', 'Boolean', ...
                                'arith_type', 'Boolean', ...
                                'bin_pt', 0, ...
                                'intf_description', 'qdata'), ...
                         {[]}, ...
                         {xlsub1_ivalid_i_out1});

% block: driftDetect/qdata_i
xlsub1_qdata_i_out1 = xSignal('xlsub1_qdata_i_out1');
xlsub1_qdata_i = xBlock(struct('source', 'Gateway In', 'name', 'qdata_i'), ...
                        struct('bin_pt', 0, ...
                               'intf_description', 'qdata'), ...
                        {[]}, ...
                        {xlsub1_qdata_i_out1});

% block: driftDetect/qvalid_i
xlsub1_qvalid_i_out1 = xSignal('xlsub1_qvalid_i_out1');
xlsub1_qvalid_i = xBlock(struct('source', 'Gateway In', 'name', 'qvalid_i'), ...
                         struct('gui_display_data_type', 'Boolean', ...
                                'arith_type', 'Boolean', ...
                                'bin_pt', 0, ...
                                'intf_description', 'qdata'), ...
                         {[]}, ...
                         {xlsub1_qvalid_i_out1});

% block: driftDetect/rstn
xlsub1_rstn_out1 = xSignal('xlsub1_rstn_out1');
xlsub1_rstn = xBlock(struct('source', 'Gateway In', 'name', 'rstn'), ...
                     struct('gui_display_data_type', 'Boolean', ...
                            'arith_type', 'Boolean', ...
                            'n_bits', 1, ...
                            'bin_pt', 0, ...
                            'intf_description', 'qdata'), ...
                     {[]}, ...
                     {xlsub1_rstn_out1});

% block: driftDetect/sel_o
xlsub1_sel_o_out1 = xSignal('xlsub1_sel_o_out1');
xlsub1_sel_o = xBlock(struct('source', 'Gateway Out', 'name', 'sel_o'), ...
                      [], ...
                      {xlsub1_Register_out1}, ...
                      {xlsub1_sel_o_out1});

% block: driftDetect/Detector
xlsub1_Detector_sub = xBlock(struct('source', @xlsub1_Detector, 'name', 'Detector'), ...
                         {}, ...
                         {xlsub1_idata_i_out1, xlsub1_ivalid_i_out1, xlsub1_qdata_i_out1, xlsub1_qvalid_i_out1, xlsub1_rstn_out1, xlsub1_Delay6_out1, xlsub1_Delay1_out1}, ...
                         {xlsub1_Detector_out1, xlsub1_Detector_out2, xlsub1_Detector_out3, xlsub1_Detector_out4, xlsub1_Detector_out5});

% block: driftDetect/edge detector
xlsub1_edge_detector_sub = xBlock(struct('source', @xlsub1_edge_detector, 'name', 'edge detector'), ...
                              {}, ...
                              {xlsub1_MCode_out1}, ...
                              {xlsub1_edge_detector_out1});



function xlsub1_Detector()



%% inports
xlsub2_idata_i = xInport('idata_i');
xlsub2_ivalid_i = xInport('ivalid_i');
xlsub2_qdata_i = xInport('qdata_i');
xlsub2_qvalid_i = xInport('qvalid_i');
xlsub2_ap_rst_n = xInport('ap_rst_n');
xlsub2_cumsumcur_vld_i = xInport('cumsumcur_vld_i');
xlsub2_cumsumcur_i = xInport('cumsumcur_i');

%% outports
xlsub2_histarray_vld_o = xOutport('histarray_vld_o');
xlsub2_histarray_o = xOutport('histarray_o');
xlsub2_pdist_vld_o = xOutport('pdist_vld_o');
xlsub2_pdist_low_o = xOutport('pdist_low_o');
xlsub2_pdist_high_o = xOutport('pdist_high_o');

%% diagram

% block: driftDetect/Detector/Accumulator1
xlsub2_AddSub2_out1 = xSignal('xlsub2_AddSub2_out1');
xlsub2_Accumulator1_out1 = xSignal('xlsub2_Accumulator1_out1');
xlsub2_Accumulator1 = xBlock(struct('source', 'Accumulator', 'name', 'Accumulator1'), ...
                             struct('n_bits', 16, ...
                                    'rst', 'off'), ...
                             {xlsub2_AddSub2_out1}, ...
                             {xlsub2_Accumulator1_out1});

% block: driftDetect/Detector/AddSub2
xlsub2_airTime_out1 = xSignal('xlsub2_airTime_out1');
xlsub2_Delay4_out1 = xSignal('xlsub2_Delay4_out1');
xlsub2_AddSub2 = xBlock(struct('source', 'AddSub', 'name', 'AddSub2'), ...
                        struct('mode', 'Subtraction'), ...
                        {xlsub2_airTime_out1, xlsub2_Delay4_out1}, ...
                        {xlsub2_AddSub2_out1});

% block: driftDetect/Detector/Constant1
xlsub2_Constant1_out1 = xSignal('xlsub2_Constant1_out1');
xlsub2_Constant1 = xBlock(struct('source', 'Constant', 'name', 'Constant1'), ...
                          struct('const', 255, ...
                                 'arith_type', 'Unsigned', ...
                                 'n_bits', 13, ...
                                 'bin_pt', 0), ...
                          {}, ...
                          {xlsub2_Constant1_out1});

% block: driftDetect/Detector/Convert1
xlsub2_Convert1_out1 = xSignal('xlsub2_Convert1_out1');
xlsub2_Convert1 = xBlock(struct('source', 'Convert', 'name', 'Convert1'), ...
                         struct('arith_type', 'Unsigned', ...
                                'bin_pt', 0, ...
                                'latency', 0), ...
                         {xlsub2_Accumulator1_out1}, ...
                         {xlsub2_Convert1_out1});

% block: driftDetect/Detector/Counter1
xlsub2_Delay1_out1 = xSignal('xlsub2_Delay1_out1');
xlsub2_Counter1_out1 = xSignal('xlsub2_Counter1_out1');
xlsub2_Counter1 = xBlock(struct('source', 'Counter', 'name', 'Counter1'), ...
                         struct('cnt_to', 1000, ...
                                'en', 'on'), ...
                         {xlsub2_Delay1_out1}, ...
                         {xlsub2_Counter1_out1});

% block: driftDetect/Detector/Delay1
xlsub2_airTime_out2 = xSignal('xlsub2_airTime_out2');
xlsub2_Delay1 = xBlock(struct('source', 'Delay', 'name', 'Delay1'), ...
                       struct('latency', 2), ...
                       {xlsub2_airTime_out2}, ...
                       {xlsub2_Delay1_out1});

% block: driftDetect/Detector/Delay10
xlsub2_hist_out2 = xSignal('xlsub2_hist_out2');
xlsub2_Delay10 = xBlock(struct('source', 'Delay', 'name', 'Delay10'), ...
                        [], ...
                        {xlsub2_hist_out2}, ...
                        {xlsub2_histarray_o});

% block: driftDetect/Detector/Delay11
xlsub2_cdf_out1 = xSignal('xlsub2_cdf_out1');
xlsub2_Delay11_out1 = xSignal('xlsub2_Delay11_out1');
xlsub2_Delay11 = xBlock(struct('source', 'Delay', 'name', 'Delay11'), ...
                        [], ...
                        {xlsub2_cdf_out1}, ...
                        {xlsub2_Delay11_out1});

% block: driftDetect/Detector/Delay12
xlsub2_absdiff_out1 = xSignal('xlsub2_absdiff_out1');
xlsub2_Delay12_out1 = xSignal('xlsub2_Delay12_out1');
xlsub2_Delay12 = xBlock(struct('source', 'Delay', 'name', 'Delay12'), ...
                        [], ...
                        {xlsub2_absdiff_out1}, ...
                        {xlsub2_Delay12_out1});

% block: driftDetect/Detector/Delay13
xlsub2_cdf_out2 = xSignal('xlsub2_cdf_out2');
xlsub2_Delay13_out1 = xSignal('xlsub2_Delay13_out1');
xlsub2_Delay13 = xBlock(struct('source', 'Delay', 'name', 'Delay13'), ...
                        [], ...
                        {xlsub2_cdf_out2}, ...
                        {xlsub2_Delay13_out1});

% block: driftDetect/Detector/Delay14
xlsub2_Delay14_out1 = xSignal('xlsub2_Delay14_out1');
xlsub2_Delay14 = xBlock(struct('source', 'Delay', 'name', 'Delay14'), ...
                        [], ...
                        {xlsub2_cumsumcur_vld_i}, ...
                        {xlsub2_Delay14_out1});

% block: driftDetect/Detector/Delay15
xlsub2_absdiff_out2 = xSignal('xlsub2_absdiff_out2');
xlsub2_Delay15_out1 = xSignal('xlsub2_Delay15_out1');
xlsub2_Delay15 = xBlock(struct('source', 'Delay', 'name', 'Delay15'), ...
                        [], ...
                        {xlsub2_absdiff_out2}, ...
                        {xlsub2_Delay15_out1});

% block: driftDetect/Detector/Delay2
xlsub2_pdist_out2 = xSignal('xlsub2_pdist_out2');
xlsub2_Delay2_out1 = xSignal('xlsub2_Delay2_out1');
xlsub2_Delay2 = xBlock(struct('source', 'Delay', 'name', 'Delay2'), ...
                       [], ...
                       {xlsub2_pdist_out2}, ...
                       {xlsub2_Delay2_out1});

% block: driftDetect/Detector/Delay3
xlsub2_pdist_out1 = xSignal('xlsub2_pdist_out1');
xlsub2_Delay3 = xBlock(struct('source', 'Delay', 'name', 'Delay3'), ...
                       [], ...
                       {xlsub2_pdist_out1}, ...
                       {xlsub2_pdist_vld_o});

% block: driftDetect/Detector/Delay4
xlsub2_Delay4 = xBlock(struct('source', 'Delay', 'name', 'Delay4'), ...
                       struct('latency', 10000), ...
                       {xlsub2_airTime_out1}, ...
                       {xlsub2_Delay4_out1});

% block: driftDetect/Detector/Delay5
xlsub2_Resetifhit1_out1 = xSignal('xlsub2_Resetifhit1_out1');
xlsub2_Delay5_out1 = xSignal('xlsub2_Delay5_out1');
xlsub2_Delay5 = xBlock(struct('source', 'Delay', 'name', 'Delay5'), ...
                       [], ...
                       {xlsub2_Resetifhit1_out1}, ...
                       {xlsub2_Delay5_out1});

% block: driftDetect/Detector/Delay6
xlsub2_Delay6_out1 = xSignal('xlsub2_Delay6_out1');
xlsub2_Delay6 = xBlock(struct('source', 'Delay', 'name', 'Delay6'), ...
                       [], ...
                       {xlsub2_Convert1_out1}, ...
                       {xlsub2_Delay6_out1});

% block: driftDetect/Detector/Delay7
xlsub2_hist_out1 = xSignal('xlsub2_hist_out1');
xlsub2_Delay7 = xBlock(struct('source', 'Delay', 'name', 'Delay7'), ...
                       [], ...
                       {xlsub2_hist_out1}, ...
                       {xlsub2_histarray_vld_o});

% block: driftDetect/Detector/Delay8
xlsub2_Delay8_out1 = xSignal('xlsub2_Delay8_out1');
xlsub2_Delay8 = xBlock(struct('source', 'Delay', 'name', 'Delay8'), ...
                       [], ...
                       {xlsub2_ap_rst_n}, ...
                       {xlsub2_Delay8_out1});

% block: driftDetect/Detector/Delay9
xlsub2_Delay9_out1 = xSignal('xlsub2_Delay9_out1');
xlsub2_Delay9 = xBlock(struct('source', 'Delay', 'name', 'Delay9'), ...
                       [], ...
                       {xlsub2_cumsumcur_i}, ...
                       {xlsub2_Delay9_out1});

% block: driftDetect/Detector/Resetifhit1
xlsub2_Resetifhit1 = xBlock(struct('source', 'Relational', 'name', 'Resetifhit1'), ...
                            struct('latency', 0), ...
                            {xlsub2_Counter1_out1, xlsub2_Constant1_out1}, ...
                            {xlsub2_Resetifhit1_out1});

% block: driftDetect/Detector/Slice
xlsub2_Slice = xBlock(struct('source', 'Slice', 'name', 'Slice'), ...
                      struct('mode', 'Two Bit Locations', ...
                             'bit1', 15, ...
                             'base1', 'LSB of Input'), ...
                      {xlsub2_Delay2_out1}, ...
                      {xlsub2_pdist_low_o});

% block: driftDetect/Detector/Slice1
xlsub2_Slice1 = xBlock(struct('source', 'Slice', 'name', 'Slice1'), ...
                       struct('mode', 'Two Bit Locations', ...
                              'bit1', 31, ...
                              'base1', 'LSB of Input', ...
                              'bit0', 16), ...
                       {xlsub2_Delay2_out1}, ...
                       {xlsub2_pdist_high_o});


% block: driftDetect/Detector/absdiff
xlsub2_absdiff = xBlock(struct('source', 'Vivado HLS', 'name', 'absdiff'), ...
                        struct('anytable', 'C:/testingSysgenBuild/HLS/absdiff/solution1', ...
                               'display_datatype', 'on'), ...
                        {xlsub2_Delay8_out1, xlsub2_Delay11_out1, xlsub2_Delay13_out1, xlsub2_Delay14_out1, xlsub2_Delay9_out1}, ...
                        {xlsub2_absdiff_out1, xlsub2_absdiff_out2});

% block: driftDetect/Detector/cdf
xlsub2_cdf = xBlock(struct('source', 'Vivado HLS', 'name', 'cdf'), ...
                    struct('anytable', 'C:/testingSysgenBuild/HLS/cdf/solution1', ...
                           'display_datatype', 'on'), ...
                    {xlsub2_Delay8_out1, xlsub2_Delay5_out1, xlsub2_Delay6_out1}, ...
                    {xlsub2_cdf_out1, xlsub2_cdf_out2});

% block: driftDetect/Detector/hist
xlsub2_hist = xBlock(struct('source', 'Vivado HLS', 'name', 'hist'), ...
                     struct('anytable', 'C:/testingSysgenBuild/HLS/hist/solution1', ...
                            'display_datatype', 'on'), ...
                     {xlsub2_Delay8_out1, xlsub2_Delay5_out1, xlsub2_Delay6_out1}, ...
                     {xlsub2_hist_out1, xlsub2_hist_out2});

% block: driftDetect/Detector/pdist
xlsub2_pdist = xBlock(struct('source', 'Vivado HLS', 'name', 'pdist'), ...
                      struct('anytable', 'C:/testingSysgenBuild/HLS/pdist/solution1', ...
                             'display_datatype', 'on'), ...
                      {xlsub2_Delay8_out1, xlsub2_Delay12_out1, xlsub2_Delay15_out1}, ...
                      {xlsub2_pdist_out1, xlsub2_pdist_out2});

% block: driftDetect/Detector/airTime
xlsub2_airTime_out3 = xSignal('xlsub2_airTime_out3');
xlsub2_airTime_sub = xBlock(struct('source', @xlsub2_airTime, 'name', 'airTime'), ...
                        {}, ...
                        {xlsub2_idata_i, xlsub2_ivalid_i, xlsub2_qdata_i, xlsub2_qvalid_i}, ...
                        {xlsub2_airTime_out1, xlsub2_airTime_out2, xlsub2_airTime_out3});



function xlsub2_airTime()



%% inports
xlsub3_idata_i = xInport('idata_i');
xlsub3_ivalid_i = xInport('ivalid_i');
xlsub3_qdata_i = xInport('qdata_i');
xlsub3_qvalid_i = xInport('qvalid_i');

%% outports
xlsub3_airtime_o = xOutport('airtime_o');
xlsub3_ivalid_o = xOutport('ivalid_o');
xlsub3_qvalid_o = xOutport('qvalid_o');

%% diagram

% block: driftDetect/Detector/airTime/Accumulator
xlsub3_AddSub1_out1 = xSignal('xlsub3_AddSub1_out1');
xlsub3_Accumulator_out1 = xSignal('xlsub3_Accumulator_out1');
xlsub3_Accumulator = xBlock(struct('source', 'Accumulator', 'name', 'Accumulator'), ...
                            struct('n_bits', 32, ...
                                   'rst', 'off'), ...
                            {xlsub3_AddSub1_out1}, ...
                            {xlsub3_Accumulator_out1});

% block: driftDetect/Detector/airTime/AddSub
xlsub3_Mult_out1 = xSignal('xlsub3_Mult_out1');
xlsub3_Mult1_out1 = xSignal('xlsub3_Mult1_out1');
xlsub3_AddSub_out1 = xSignal('xlsub3_AddSub_out1');
xlsub3_AddSub = xBlock(struct('source', 'AddSub', 'name', 'AddSub'), ...
                       [], ...
                       {xlsub3_Mult_out1, xlsub3_Mult1_out1}, ...
                       {xlsub3_AddSub_out1});

% block: driftDetect/Detector/airTime/AddSub1
xlsub3_Delay_out1 = xSignal('xlsub3_Delay_out1');
xlsub3_AddSub1 = xBlock(struct('source', 'AddSub', 'name', 'AddSub1'), ...
                        struct('mode', 'Subtraction'), ...
                        {xlsub3_AddSub_out1, xlsub3_Delay_out1}, ...
                        {xlsub3_AddSub1_out1});

% block: driftDetect/Detector/airTime/Constant
xlsub3_Constant_out1 = xSignal('xlsub3_Constant_out1');
xlsub3_Constant = xBlock(struct('source', 'Constant', 'name', 'Constant'), ...
                         struct('const', 1023, ...
                                'arith_type', 'Unsigned', ...
                                'n_bits', 10, ...
                                'bin_pt', 0), ...
                         {}, ...
                         {xlsub3_Constant_out1});

% block: driftDetect/Detector/airTime/Convert
xlsub3_Relational1_out1 = xSignal('xlsub3_Relational1_out1');
xlsub3_Convert = xBlock(struct('source', 'Convert', 'name', 'Convert'), ...
                        struct('arith_type', 'Unsigned', ...
                               'n_bits', 1, ...
                               'bin_pt', 0, ...
                               'latency', 0), ...
                        {xlsub3_Relational1_out1}, ...
                        {xlsub3_airtime_o});

% block: driftDetect/Detector/airTime/Convert1
xlsub3_Relational_out1 = xSignal('xlsub3_Relational_out1');
xlsub3_Convert1_out1 = xSignal('xlsub3_Convert1_out1');
xlsub3_Convert1 = xBlock(struct('source', 'Convert', 'name', 'Convert1'), ...
                         struct('arith_type', 'Unsigned', ...
                                'n_bits', 1, ...
                                'bin_pt', 0, ...
                                'latency', 0), ...
                         {xlsub3_Relational_out1}, ...
                         {xlsub3_Convert1_out1});

% block: driftDetect/Detector/airTime/Counter
xlsub3_Counter_out1 = xSignal('xlsub3_Counter_out1');
xlsub3_Counter = xBlock(struct('source', 'Counter', 'name', 'Counter'), ...
                        struct('cnt_to', 1000, ...
                               'n_bits', 10), ...
                        {}, ...
                        {xlsub3_Counter_out1});

% block: driftDetect/Detector/airTime/Delay
xlsub3_Delay = xBlock(struct('source', 'Delay', 'name', 'Delay'), ...
                      struct('latency', 64), ...
                      {xlsub3_AddSub_out1}, ...
                      {xlsub3_Delay_out1});

% block: driftDetect/Detector/airTime/Delay1
xlsub3_Delay1_out1 = xSignal('xlsub3_Delay1_out1');
xlsub3_Delay1 = xBlock(struct('source', 'Delay', 'name', 'Delay1'), ...
                       [], ...
                       {xlsub3_Accumulator_out1}, ...
                       {xlsub3_Delay1_out1});

% block: driftDetect/Detector/airTime/Delay11
xlsub3_Delay11_out1 = xSignal('xlsub3_Delay11_out1');
xlsub3_Delay11 = xBlock(struct('source', 'Delay', 'name', 'Delay11'), ...
                        struct('latency', 6), ...
                        {xlsub3_AddSub_out1}, ...
                        {xlsub3_Delay11_out1});

% block: driftDetect/Detector/airTime/Delay2
xlsub3_Delay2 = xBlock(struct('source', 'Delay', 'name', 'Delay2'), ...
                       struct('latency', 12), ...
                       {xlsub3_qvalid_i}, ...
                       {xlsub3_qvalid_o});

% block: driftDetect/Detector/airTime/Delay3
xlsub3_Delay3 = xBlock(struct('source', 'Delay', 'name', 'Delay3'), ...
                       struct('latency', 12), ...
                       {xlsub3_ivalid_i}, ...
                       {xlsub3_ivalid_o});

% block: driftDetect/Detector/airTime/Mult
xlsub3_Register4_out1 = xSignal('xlsub3_Register4_out1');
xlsub3_Mult = xBlock(struct('source', 'Mult', 'name', 'Mult'), ...
                     [], ...
                     {xlsub3_Register4_out1, xlsub3_Register4_out1}, ...
                     {xlsub3_Mult_out1});

% block: driftDetect/Detector/airTime/Mult1
xlsub3_Register5_out1 = xSignal('xlsub3_Register5_out1');
xlsub3_Mult1 = xBlock(struct('source', 'Mult', 'name', 'Mult1'), ...
                      [], ...
                      {xlsub3_Register5_out1, xlsub3_Register5_out1}, ...
                      {xlsub3_Mult1_out1});

% block: driftDetect/Detector/airTime/Mux
xlsub3_currentmin_out1 = xSignal('xlsub3_currentmin_out1');
xlsub3_Mux_out1 = xSignal('xlsub3_Mux_out1');
xlsub3_Mux = xBlock(struct('source', 'Mux', 'name', 'Mux'), ...
                    struct('latency', 0), ...
                    {xlsub3_Convert1_out1, xlsub3_currentmin_out1, xlsub3_Delay1_out1}, ...
                    {xlsub3_Mux_out1});

% block: driftDetect/Detector/airTime/Mux1
xlsub3_Resetifhit_out1 = xSignal('xlsub3_Resetifhit_out1');
xlsub3_Register_out1 = xSignal('xlsub3_Register_out1');
xlsub3_Mux1_out1 = xSignal('xlsub3_Mux1_out1');
xlsub3_Mux1 = xBlock(struct('source', 'Mux', 'name', 'Mux1'), ...
                     struct('latency', 0), ...
                     {xlsub3_Resetifhit_out1, xlsub3_Register_out1, xlsub3_currentmin_out1}, ...
                     {xlsub3_Mux1_out1});

% block: driftDetect/Detector/airTime/Register
xlsub3_Register = xBlock(struct('source', 'Register', 'name', 'Register'), ...
                         struct('init', 2e8), ...
                         {xlsub3_Mux1_out1}, ...
                         {xlsub3_Register_out1});

% block: driftDetect/Detector/airTime/Register4
xlsub3_Register4 = xBlock(struct('source', 'Register', 'name', 'Register4'), ...
                          struct('en', 'on'), ...
                          {xlsub3_idata_i, xlsub3_ivalid_i}, ...
                          {xlsub3_Register4_out1});

% block: driftDetect/Detector/airTime/Register5
xlsub3_Register5 = xBlock(struct('source', 'Register', 'name', 'Register5'), ...
                          struct('en', 'on'), ...
                          {xlsub3_qdata_i, xlsub3_qvalid_i}, ...
                          {xlsub3_Register5_out1});

% block: driftDetect/Detector/airTime/Relational
xlsub3_Relational = xBlock(struct('source', 'Relational', 'name', 'Relational'), ...
                           struct('mode', 'a<b'), ...
                           {xlsub3_Accumulator_out1, xlsub3_currentmin_out1}, ...
                           {xlsub3_Relational_out1});

% block: driftDetect/Detector/airTime/Relational1
xlsub3_Shift_out1 = xSignal('xlsub3_Shift_out1');
xlsub3_Relational1 = xBlock(struct('source', 'Relational', 'name', 'Relational1'), ...
                            struct('mode', 'a>b'), ...
                            {xlsub3_Delay11_out1, xlsub3_Shift_out1}, ...
                            {xlsub3_Relational1_out1});

% block: driftDetect/Detector/airTime/Resetifhit
xlsub3_Resetifhit = xBlock(struct('source', 'Relational', 'name', 'Resetifhit'), ...
                           struct('latency', 0), ...
                           {xlsub3_Counter_out1, xlsub3_Constant_out1}, ...
                           {xlsub3_Resetifhit_out1});

% block: driftDetect/Detector/airTime/Shift
xlsub3_Shift = xBlock(struct('source', 'Shift', 'name', 'Shift'), ...
                      struct('shift_dir', 'Right'), ...
                      {xlsub3_Register_out1}, ...
                      {xlsub3_Shift_out1});

% block: driftDetect/Detector/airTime/currentmin
xlsub3_currentmin = xBlock(struct('source', 'Register', 'name', 'currentmin'), ...
                           struct('init', 2e8, ...
                                  'rst', 'on'), ...
                           {xlsub3_Mux_out1, xlsub3_Resetifhit_out1}, ...
                           {xlsub3_currentmin_out1});



end

end

function xlsub1_edge_detector()



%% inports
xlsub2_In1 = xInport('In1');

%% outports
xlsub2_Out1 = xOutport('Out1');

%% diagram

% block: driftDetect/edge detector/Delay
xlsub2_Inverter_out1 = xSignal('xlsub2_Inverter_out1');
xlsub2_Delay_out1 = xSignal('xlsub2_Delay_out1');
xlsub2_Delay = xBlock(struct('source', 'Delay', 'name', 'Delay'), ...
                      [], ...
                      {xlsub2_Inverter_out1}, ...
                      {xlsub2_Delay_out1});

% block: driftDetect/edge detector/Inverter
xlsub2_Inverter = xBlock(struct('source', 'Inverter', 'name', 'Inverter'), ...
                         struct('latency', 0), ...
                         {xlsub2_In1}, ...
                         {xlsub2_Inverter_out1});

% block: driftDetect/edge detector/Logical
xlsub2_Logical = xBlock(struct('source', 'Logical', 'name', 'Logical'), ...
                        struct('latency', 0), ...
                        {xlsub2_In1, xlsub2_Delay_out1}, ...
                        {xlsub2_Out1});



end

end

